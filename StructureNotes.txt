structures are like objects without methods

ex :

struct fish {
  char* name;
  char* species;
  int teeth;
  int age;
};

struct fish snappy = ("Snappy", "Piranha", 69, 4);
struct fish gnasher = snappy;

Use dot notation for calling the specific parts

void catalog (struct fish f) {
printf("%s is a %s with %i teeth. He is %i years of age", f.name, f.species, f.teeth, f.age);
}

called with :
void catalog (struct snappy);

can also nest them

struct preferences {
  char* food
  int exerciseHours;
}

struct preferences care = ("meat", 5);

struct fish {
  char* name;
  char* species;
  int teeth;
  int age;
  struct preferences care;
};

struct fish snappy = ("Snappy", "Piranha", 69, 4, {"meat", 5});???????

typedef is an alias
makes it so you don't have to use struct every time you refer to it

typedef struct {
  char* name;
  char* species;
  int teeth;
  int age;
} fish;

fish f = ("Snappy", "Piranha", 69, 4);

structs are a fixed length

copy or assign as a unistd
take address with &
access it's members
can't compare structs

Use a pointer to pass them around.


EX of using typedef and function :

typedef struct {
  const char* name;
  const char* species;
  int age;
} turtle;

void happy_birthday(turtle *t) {
  (*t).age = (*t).age + 1
  printf("You're now %d", t);
}

another way to write (*t).age is t->age
